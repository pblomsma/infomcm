arrows(sf_meantime,sf_meanlane - sf_meanlane.se,sf_meantime,sf_meanlane + sf_meanlane.se, angle=90,code=3, col = "green", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime - sf_meantime.se, sf_meanlane , sf_meantime + sf_meantime.se, sf_meanlane , angle = 90, code = 3, col="green", length = 0.1)
#DF points + arrows
points(df_meantime,df_meanlane, col="blue",pch=22, ylim = g_range)
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime,df_meanlane - df_meanlane.se,df_meantime,df_meanlane + df_meanlane.se, angle=90,code=3, col = "blue", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime - df_meantime.se, df_meanlane , df_meantime + df_meantime.se, df_meanlane , angle = 90, code = 3, col="blue", length = 0.1)
# Create labels and legend
legend(11, 0.8, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
### give a summary of the data
summary(agrResultsMeanDrift$TrialTime)
print(mean(agrResultsMeanDrift$TrialTime))
return(mean(agrResultsMeanDrift$x))
}
#### Main function to run the code. For example: runAllSimpleStrategies(5,"07854325698") will run 5 simulations for each (simple) strategy on the phone number to the right. The default assumption is that the chunk boundary is between the 5th and 6th digit
runAllSimpleStrategies <- function(nrSimulations,phoneNumber)
{
normalPhoneStructure <- c(1,6)  ### indicate at what digit positions a chunk needs to be retrieved (1st and 6th digit)
# 0-78543-25698
phoneStringLength <- 11   ### how many digits does the number have?
### vectors that will contain output of the simulation. These are later used to create 1 table with all values
keypresses <- c()
times <- c()
deviations <- c()
strats <- c()
steers <- c()
### iterate through all strategies
## in this simple model we assume that a participant uses a consistent strategy throughout the trial. That is, they only type each time 1 digit, or type 2 digits at a time, or type 3 digits at a time (i.e., all possible ways of 1:phoneStringLength: 1, 2,3,4, ...11)
for (nrDigitsPerTime in 1: phoneStringLength)
{
## quick way of calculating positions to interleave: repeat strategy & multiply with position in vector (e.g., 333*123 = 369 this means: you interleave BEFORE every 3rd digit (333), and there are 3 positions to interleave (1st, 2nd, 3rd, or 123). Therefore you interleave BEFORE digits 3 (3*1), 6 (3*2), and 9 (3*3))
if (nrDigitsPerTime != 11)
{
strategy <- rep(nrDigitsPerTime ,floor(phoneStringLength/nrDigitsPerTime))  ### stores at which positions the number is interleaved
positions <- 1:length(strategy)
strategy <- strategy * positions
### remove last digit, as driver does not interleave after typing the last digit (they are done with the trial :-)  )
strategy <- strategy[strategy != phoneStringLength]
}
else
{
strategy <- c()
}
locSteerTimeOptions <- steeringTimeOptions
if (length(strategy) == 0)
{
locSteerTimeOptions <- c(0)
}
### now run a trial (runOneTrial) for all combinations of how frequently you update the steering when you are steering (locSteerTimeOptions) and for the nuber of simulations that you want to run for each strategy (nrSimulations)
for (steerTimes in locSteerTimeOptions)
{
for (i in 1:nrSimulations)
{
### run the simulation and store the output in a table
locTab <- runOneTrial(strategy, steerTimes,normalPhoneStructure,phoneStringLength,phoneNumber)
##only look at rows where there is a keypress
locTab <- locTab[locTab$events == "keypress",]
### add the relevant data points to variables that are stored in a final table
keypresses <- c(keypresses,1:nrow(locTab))
times <- c(times,locTab$times)
deviations <- c(deviations,locTab$drifts)
strats <- c(strats,rep(nrDigitsPerTime,nrow(locTab)))
steers <- c(steers,rep(steerTimes,nrow(locTab)))
}
}#end of for steerTimes
}##end of for nr strategies
### now make a new table based on all the data that was collected
tableAllSamples <- data.frame(keypresses,times,deviations,strats,steers)
#### In the table we collected data for multiple simulations per strategy. Now we want to know the average performane of each strategy.
#### These aspects are calculated using the "aggregate" function
## calculate average deviation at each keypress (keypresses), for each unique strategy variation (strats and steers)
agrResults <- with(tableAllSamples,aggregate(deviations,list(keypresses=keypresses, strats= strats, steers= steers),mean))
agrResults$dev <- agrResults$x
### also calculate the time interval
agrResults$times <- with(tableAllSamples,aggregate(times,list(keypresses=keypresses, strats= strats, steers= steers),mean))$x
###now calculate mean drift across the trial
agrResultsMeanDrift <-  with(agrResults,aggregate(dev,list(strats= strats, steers= steers),mean))
agrResultsMeanDrift$dev <- agrResultsMeanDrift$x
### and mean trial time
agrResultsMeanDrift$TrialTime <-  with(agrResults[agrResults$keypresses ==11,],aggregate(times,list( strats= strats, steers= steers),mean))$x
#### make a plot that visualizes all the strategies: note that trial time is divided by 1000 to get the time in seconds
with(agrResultsMeanDrift,plot(TrialTime/1000,abs(dev),pch=21,bg="dark grey",col="dark grey",log="x",xlab="Dial time (s)",ylab="Average Lateral Deviation (m)", main =paste0("Result of runAllSimpleStrategies with ", as.character(nrSimulations) , " simulation(s) (", as.character(nrow(tableAllSamples)) ,  " datapoints)")))
### give a summary of the data
summary(agrResultsMeanDrift$TrialTime)
print(mean(agrResultsMeanDrift$TrialTime))
return(mean(agrResultsMeanDrift$x))
}
### function that generates the points at which car data should be collected (specifically: if you know that a keypress happens after a specific time, then find out at what points a drift update occurs, this depends on the ength of "timeStepPerDriftUpdate" (50 msec by default))
updateTimestampslist <- function(timestampsList, totalTime)
{
lastTime <- timestampsList[length(timestampsList)]
newTimes <- cumsum(c(lastTime,rep(timeStepPerDriftUpdate ,trunc(totalTime/timeStepPerDriftUpdate))))[-1]
timestampsList <- c(timestampsList, newTimes)
if (totalTime%%timeStepPerDriftUpdate > 0)
{
newTime <- timestampsList[length(timestampsList)] + totalTime%%timeStepPerDriftUpdate
timestampsList <- c(timestampsList, newTime)
}
timestampsList
}
### This function calculates how much the car drifts during episodes where the driver/model is not actively driving
calculateLaneDrift <- function(startPositionOfDrift, startVelocityOfDrift, driftTimeInMilliSeconds)
{
laneDriftList <- c()  ### keep a list of lane positions
#locVelocity <- velocity	#velocity is a global variable
locVelocity <- startVelocityOfDrift
lastLaneDrift <- startPositionOfDrift
for (i in 1:(trunc(driftTimeInMilliSeconds/timeStepPerDriftUpdate)))
{
locVelocity <- locVelocity + rnorm(1,gaussDeviateMean,gaussDeviateSD)
### make sure velocity is not higher than max
locVelocity <- velocityCheck(locVelocity)
lastLaneDrift <- lastLaneDrift + locVelocity* timeStepPerDriftUpdate / 1000     #velocity is in m/second
#laneDriftList <- c(laneDriftList, lastLaneDrift)
laneDriftList <- c(laneDriftList, abs(lastLaneDrift))    ### only absolute values
}
#now do drift for last few milliseconds (using modulo function)
locVelocity <-locVelocity + rnorm(1,gaussDeviateMean,gaussDeviateSD)
### make sure velocity is not higher than max
locVelocity <- velocityCheck(locVelocity)
if (driftTimeInMilliSeconds%% timeStepPerDriftUpdate > 0)
{
lastLaneDrift <- lastLaneDrift + locVelocity*(driftTimeInMilliSeconds%% timeStepPerDriftUpdate)/1000
#laneDriftList <- c(laneDriftList, lastLaneDrift)
laneDriftList <- c(laneDriftList, abs(lastLaneDrift))  ### only absolute values
}
#velocity <<- locVelocity
#laneDrift
returnValues <- c(locVelocity, laneDriftList)
returnValues
}
##calculates if the car is not accelerating more than it should (maxLateralVelocity) or less than it should (minLateralVelocity)
velocityCheck <- function(localVelocity)
{
localVelocity <- min(localVelocity, maxLateralVelocity)
localVelocity <- max(localVelocity, minLateralVelocity)
localVelocity
}
##calculates if the car is not accelerating more than it should (maxLateralVelocity) or less than it should (minLateralVelocity)  (done for a vector of numbers)
velocityCheckForVectors <- function(velocityVectors)
{
velocityVectors[which(velocityVectors > maxLateralVelocity)] <- maxLateralVelocity
velocityVectors[which(velocityVectors < minLateralVelocity)] <- minLateralVelocity
velocityVectors
}
### this function is used to update the velocity (and in effect lateral lane position) when the driver/model is actively driving
updateSteering <- function(velocity,nrUpdates,startPosLane)
{
locDrifts <- c()
localVelocity <- velocity
for (steers in 1: nrUpdates)
{
localLanePos <- startPosLane
if (steers > 1)
{
localLanePos <- locDrifts[length(locDrifts)]
}
### update direction every 250 milliseconds. Following equation (1) in Janssen & Brumby (2010)
updateVelocity <- 0.2617 * localLanePos ^2 + 0.0233* localLanePos - 0.022  #velocity in meter/sec
updateVelocity <- updateVelocity + rnorm(1, gaussDriveNoiseMean, gaussDriveNoiseSD)    ### a noise value is added for driving (only done once)
updateVelocity <- velocityCheck(updateVelocity)
###calculate updates locally (i.e., add some noise to updateVelocity, but do not make it transfer to other values)
## calculate using cumsum to save computer time :-)
nrUpdatesOf50Msec <- steeringUpdateTime/timeStepPerDriftUpdate
velocityVector <- rnorm(nrUpdatesOf50Msec,(updateVelocity + gaussDeviateMean), gaussDeviateSD)
velocityVector  <- velocityCheckForVectors(velocityVector)
directionUpdates <- -1 * velocityVector * 0.050    ##only driving for 0.050 seconds
newDrifts <- cumsum(c(localLanePos, directionUpdates))
newDrifts  <- newDrifts[2:length(newDrifts)]
locDrifts <- c(locDrifts , abs(newDrifts))   #### only absolute values
}
returnValues <- c(updateVelocity,locDrifts)
}
#### make a plot that visualizes all the strategies: note that trial time is divided by 1000 to get the time in seconds
with(agrResultsMeanDrift,plot(TrialTime/1000,abs(dev),pch=21,bg="dark grey",col="dark grey",log = "x",xlab="Dial time (s)",ylab="Average Lateral Deviation (m)", main =paste0("Result of runAllComplexStrategies with ", as.character(nrSimulations) , " simulation(s) (", as.character(nrow(tableAllSamples)) ,  " datapoints)")))
# Create labels and legend
legend(11, 0.85, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
# Create labels and legend
legend(9, 0.85, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
# Create labels and legend
legend(5, 0.9, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
# Create labels and legend
legend(5, 1, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
# Create labels and legend
legend(5, 0.95, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
#### make a plot that visualizes all the strategies: note that trial time is divided by 1000 to get the time in seconds
with(agrResultsMeanDrift,plot(TrialTime/1000,abs(dev),pch=21,bg="dark grey",col="dark grey",log = "x",xlab="Dial time (s)",ylab="Average Lateral Deviation (m)", main =paste0("Result of runAllComplexStrategies with ", as.character(nrSimulations) , " simulation(s) (", as.character(nrow(tableAllSamples)) ,  " datapoints)")))
with(agrResultsMeanDrift,plot(TrialTime/1000,abs(dev),pch=21,bg="dark grey",col="dark grey",log = "x",xlab="Dial time (s)",ylab="Average Lateral Deviation (m)", main =paste0("Result of runAllComplexStrategies with ", as.character(nrSimulations) , " simulation(s) (", as.character(nrow(tableAllSamples)) ,  " datapoints)")))
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
### plotinf the mean of the human data
sf_means_subset <- sf[which(sf$phoneNrLengthBeforeKeyPress=='11'),]
sf_meanlane <- sf_means_subset$lanePosition
sf_meanlane.se <- sf_means_subset$lanePosition.se
sf_meantime <- sf_means_subset$timeRelativeToTrialStart / 1000
sf_meantime.se <- sf_means_subset$timeRelativeToTrialStart.se / 1000
df_means_subset <- df[which(df$phoneNrLengthBeforeKeyPress=='11'),]
df_meanlane <- df_means_subset$lanePosition
df_meanlane.se <- df_means_subset$lanePosition.se
df_meantime <- df_means_subset$timeRelativeToTrialStart / 1000
df_meantime.se <- df_means_subset$timeRelativeToTrialStart.se / 1000
#SF points + arrows
points(sf_meantime,sf_meanlane, col="green",pch=22, ylim = g_range,bg="green")
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime,sf_meanlane - sf_meanlane.se,sf_meantime,sf_meanlane + sf_meanlane.se, angle=90,code=3, col = "green", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime - sf_meantime.se, sf_meanlane , sf_meantime + sf_meantime.se, sf_meanlane , angle = 90, code = 3, col="green", length = 0.1)
#DF points + arrows
points(df_meantime,df_meanlane, col="blue",pch=22, ylim = g_range)
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime,df_meanlane - df_meanlane.se,df_meantime,df_meanlane + df_meanlane.se, angle=90,code=3, col = "blue", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime - df_meantime.se, df_meanlane , df_meantime + df_meantime.se, df_meanlane , angle = 90, code = 3, col="blue", length = 0.1)
# Create labels and legend
legend(5, 0.95, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
### give a summary of the data
summary(agrResultsMeanDrift$TrialTime)
agrResultsMeanDriftonly56 <- agrResultsMeanDrift[agrResultsMeanDrift$strats=="5", ]
#### make a plot that visualizes all the strategies: note that trial time is divided by 1000 to get the time in seconds
with(agrResultsMeanDrift,plot(TrialTime/1000,abs(dev),pch=21,bg="dark grey",col="dark grey",log = "x",xlab="Dial time (s)",ylab="Average Lateral Deviation (m)", main =paste0("Result of runAllComplexStrategies with ", as.character(nrSimulations) , " simulation(s) (", as.character(nrow(tableAllSamples)) ,  " datapoints)")))
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
sf_means_subset <- sf[which(sf$phoneNrLengthBeforeKeyPress=='11'),]
sf_meanlane <- sf_means_subset$lanePosition
sf_meanlane.se <- sf_means_subset$lanePosition.se
sf_meantime <- sf_means_subset$timeRelativeToTrialStart / 1000
sf_meantime.se <- sf_means_subset$timeRelativeToTrialStart.se / 1000
df_means_subset <- df[which(df$phoneNrLengthBeforeKeyPress=='11'),]
df_meanlane <- df_means_subset$lanePosition
df_meanlane.se <- df_means_subset$lanePosition.se
df_meantime <- df_means_subset$timeRelativeToTrialStart / 1000
df_meantime.se <- df_means_subset$timeRelativeToTrialStart.se / 1000
#SF points + arrows
points(sf_meantime,sf_meanlane, col="green",pch=22, ylim = g_range,bg="green")
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime,sf_meanlane - sf_meanlane.se,sf_meantime,sf_meanlane + sf_meanlane.se, angle=90,code=3, col = "green", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime - sf_meantime.se, sf_meanlane , sf_meantime + sf_meantime.se, sf_meanlane , angle = 90, code = 3, col="green", length = 0.1)
#DF points + arrows
points(df_meantime,df_meanlane, col="blue",pch=22, ylim = g_range)
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime,df_meanlane - df_meanlane.se,df_meantime,df_meanlane + df_meanlane.se, angle=90,code=3, col = "blue", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime - df_meantime.se, df_meanlane , df_meantime + df_meantime.se, df_meanlane , angle = 90, code = 3, col="blue", length = 0.1)
# Create labels and legend
legend(5, 0.95, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
### give a summary of the data
summary(agrResultsMeanDrift$TrialTime)
print(mean(agrResultsMeanDrift$TrialTime))
agrResultsMeanDriftonly56 <- agrResultsMeanDrift[agrResultsMeanDrift$strats=="5,6", ]
#### make a plot that visualizes all the strategies: note that trial time is divided by 1000 to get the time in seconds
with(agrResultsMeanDrift,plot(TrialTime/1000,abs(dev),pch=21,bg="dark grey",col="dark grey",log = "x",xlab="Dial time (s)",ylab="Average Lateral Deviation (m)", main =paste0("Result of runAllComplexStrategies with ", as.character(nrSimulations) , " simulation(s) (", as.character(nrow(tableAllSamples)) ,  " datapoints)")))
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
### plotinf the mean of the human data
sf_means_subset <- sf[which(sf$phoneNrLengthBeforeKeyPress=='11'),]
sf_meanlane <- sf_means_subset$lanePosition
sf_meanlane.se <- sf_means_subset$lanePosition.se
sf_meantime <- sf_means_subset$timeRelativeToTrialStart / 1000
sf_meantime.se <- sf_means_subset$timeRelativeToTrialStart.se / 1000
df_means_subset <- df[which(df$phoneNrLengthBeforeKeyPress=='11'),]
df_meanlane <- df_means_subset$lanePosition
df_meanlane.se <- df_means_subset$lanePosition.se
df_meantime <- df_means_subset$timeRelativeToTrialStart / 1000
df_meantime.se <- df_means_subset$timeRelativeToTrialStart.se / 1000
#SF points + arrows
points(sf_meantime,sf_meanlane, col="green",pch=22, ylim = g_range,bg="green")
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime,sf_meanlane - sf_meanlane.se,sf_meantime,sf_meanlane + sf_meanlane.se, angle=90,code=3, col = "green", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime - sf_meantime.se, sf_meanlane , sf_meantime + sf_meantime.se, sf_meanlane , angle = 90, code = 3, col="green", length = 0.1)
#DF points + arrows
points(df_meantime,df_meanlane, col="blue",pch=22, ylim = g_range)
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime,df_meanlane - df_meanlane.se,df_meantime,df_meanlane + df_meanlane.se, angle=90,code=3, col = "blue", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime - df_meantime.se, df_meanlane , df_meantime + df_meantime.se, df_meanlane , angle = 90, code = 3, col="blue", length = 0.1)
# Create labels and legend
legend(5, 0.95, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
### give a summary of the data
summary(agrResultsMeanDrift$TrialTime)
agrResultsMeanDriftonly56 <- agrResultsMeanDrift[agrResultsMeanDrift$strats=="5,6", ]
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
with(agrResultsMeanDrift,plot(TrialTime/1000,abs(dev),pch=21,bg="dark grey",col="dark grey",log = "x",xlab="Dial time (s)",ylab="Average Lateral Deviation (m)", main =paste0("Result of runAllComplexStrategies with ", as.character(nrSimulations) , " simulation(s) (", as.character(nrow(tableAllSamples)) ,  " datapoints)")))
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
View(agrResultsMeanDriftonly56)
View(agrResultsMeanDrift)
agrResultsMeanDriftonly56 <- agrResultsMeanDrift[agrResultsMeanDrift$strats=="5 , 6", ]
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
View(agrResultsMeanDrift)
agrResultsMeanDriftonly56 <- agrResultsMeanDrift[agrResultsMeanDrift$strats== "1, 10", ]
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
agrResultsMeanDriftonly56 <- agrResultsMeanDrift[agrResultsMeanDrift$strats== "3, 6, 9", ]
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
#### make a plot that visualizes all the strategies: note that trial time is divided by 1000 to get the time in seconds
with(agrResultsMeanDrift,plot(TrialTime/1000,abs(dev),pch=21,bg="dark grey",col="dark grey",log = "x",xlab="Dial time (s)",ylab="Average Lateral Deviation (m)", main =paste0("Result of runAllComplexStrategies with ", as.character(nrSimulations) , " simulation(s) (", as.character(nrow(tableAllSamples)) ,  " datapoints)")))
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
### plotinf the mean of the human data
sf_means_subset <- sf[which(sf$phoneNrLengthBeforeKeyPress=='11'),]
sf_meanlane <- sf_means_subset$lanePosition
sf_meanlane.se <- sf_means_subset$lanePosition.se
sf_meantime <- sf_means_subset$timeRelativeToTrialStart / 1000
sf_meantime.se <- sf_means_subset$timeRelativeToTrialStart.se / 1000
df_means_subset <- df[which(df$phoneNrLengthBeforeKeyPress=='11'),]
df_meanlane <- df_means_subset$lanePosition
df_meanlane.se <- df_means_subset$lanePosition.se
df_meantime <- df_means_subset$timeRelativeToTrialStart / 1000
df_meantime.se <- df_means_subset$timeRelativeToTrialStart.se / 1000
#SF points + arrows
points(sf_meantime,sf_meanlane, col="green",pch=22, ylim = g_range,bg="green")
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime,sf_meanlane - sf_meanlane.se,sf_meantime,sf_meanlane + sf_meanlane.se, angle=90,code=3, col = "green", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime - sf_meantime.se, sf_meanlane , sf_meantime + sf_meantime.se, sf_meanlane , angle = 90, code = 3, col="green", length = 0.1)
#DF points + arrows
points(df_meantime,df_meanlane, col="blue",pch=22, ylim = g_range)
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime,df_meanlane - df_meanlane.se,df_meantime,df_meanlane + df_meanlane.se, angle=90,code=3, col = "blue", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime - df_meantime.se, df_meanlane , df_meantime + df_meantime.se, df_meanlane , angle = 90, code = 3, col="blue", length = 0.1)
# Create labels and legend
legend(5, 0.95, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
### give a summary of the data
summary(agrResultsMeanDrift$TrialTime)
agrResultsMeanDriftonly56 <- agrResultsMeanDrift[agrResultsMeanDrift$strats== "3, 6", ]
#### make a plot that visualizes all the strategies: note that trial time is divided by 1000 to get the time in seconds
with(agrResultsMeanDrift,plot(TrialTime/1000,abs(dev),pch=21,bg="dark grey",col="dark grey",log = "x",xlab="Dial time (s)",ylab="Average Lateral Deviation (m)", main =paste0("Result of runAllComplexStrategies with ", as.character(nrSimulations) , " simulation(s) (", as.character(nrow(tableAllSamples)) ,  " datapoints)")))
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
### plotinf the mean of the human data
sf_means_subset <- sf[which(sf$phoneNrLengthBeforeKeyPress=='11'),]
sf_meanlane <- sf_means_subset$lanePosition
sf_meanlane.se <- sf_means_subset$lanePosition.se
sf_meantime <- sf_means_subset$timeRelativeToTrialStart / 1000
sf_meantime.se <- sf_means_subset$timeRelativeToTrialStart.se / 1000
df_means_subset <- df[which(df$phoneNrLengthBeforeKeyPress=='11'),]
df_meanlane <- df_means_subset$lanePosition
df_meanlane.se <- df_means_subset$lanePosition.se
df_meantime <- df_means_subset$timeRelativeToTrialStart / 1000
df_meantime.se <- df_means_subset$timeRelativeToTrialStart.se / 1000
#SF points + arrows
points(sf_meantime,sf_meanlane, col="green",pch=22, ylim = g_range,bg="green")
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime,sf_meanlane - sf_meanlane.se,sf_meantime,sf_meanlane + sf_meanlane.se, angle=90,code=3, col = "green", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime - sf_meantime.se, sf_meanlane , sf_meantime + sf_meantime.se, sf_meanlane , angle = 90, code = 3, col="green", length = 0.1)
#DF points + arrows
points(df_meantime,df_meanlane, col="blue",pch=22, ylim = g_range)
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime,df_meanlane - df_meanlane.se,df_meantime,df_meanlane + df_meanlane.se, angle=90,code=3, col = "blue", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime - df_meantime.se, df_meanlane , df_meantime + df_meantime.se, df_meanlane , angle = 90, code = 3, col="blue", length = 0.1)
# Create labels and legend
legend(5, 0.95, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
### give a summary of the data
summary(agrResultsMeanDrift$TrialTime)
agrResultsMeanDriftonly56 <- agrResultsMeanDrift[agrResultsMeanDrift$strats== "3, 9", ]
#### make a plot that visualizes all the strategies: note that trial time is divided by 1000 to get the time in seconds
with(agrResultsMeanDrift,plot(TrialTime/1000,abs(dev),pch=21,bg="dark grey",col="dark grey",log = "x",xlab="Dial time (s)",ylab="Average Lateral Deviation (m)", main =paste0("Result of runAllComplexStrategies with ", as.character(nrSimulations) , " simulation(s) (", as.character(nrow(tableAllSamples)) ,  " datapoints)")))
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
### plotinf the mean of the human data
sf_means_subset <- sf[which(sf$phoneNrLengthBeforeKeyPress=='11'),]
sf_meanlane <- sf_means_subset$lanePosition
sf_meanlane.se <- sf_means_subset$lanePosition.se
sf_meantime <- sf_means_subset$timeRelativeToTrialStart / 1000
sf_meantime.se <- sf_means_subset$timeRelativeToTrialStart.se / 1000
df_means_subset <- df[which(df$phoneNrLengthBeforeKeyPress=='11'),]
df_meanlane <- df_means_subset$lanePosition
df_meanlane.se <- df_means_subset$lanePosition.se
df_meantime <- df_means_subset$timeRelativeToTrialStart / 1000
df_meantime.se <- df_means_subset$timeRelativeToTrialStart.se / 1000
#SF points + arrows
points(sf_meantime,sf_meanlane, col="green",pch=22, ylim = g_range,bg="green")
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime,sf_meanlane - sf_meanlane.se,sf_meantime,sf_meanlane + sf_meanlane.se, angle=90,code=3, col = "green", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime - sf_meantime.se, sf_meanlane , sf_meantime + sf_meantime.se, sf_meanlane , angle = 90, code = 3, col="green", length = 0.1)
#DF points + arrows
points(df_meantime,df_meanlane, col="blue",pch=22, ylim = g_range)
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime,df_meanlane - df_meanlane.se,df_meantime,df_meanlane + df_meanlane.se, angle=90,code=3, col = "blue", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime - df_meantime.se, df_meanlane , df_meantime + df_meantime.se, df_meanlane , angle = 90, code = 3, col="blue", length = 0.1)
# Create labels and legend
legend(5, 0.95, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
### give a summary of the data
summary(agrResultsMeanDrift$TrialTime)
agrResultsMeanDriftonly56 <- agrResultsMeanDrift[agrResultsMeanDrift$strats== "2, 9", ]
with(agrResultsMeanDrift,plot(TrialTime/1000,abs(dev),pch=21,bg="dark grey",col="dark grey",log = "x",xlab="Dial time (s)",ylab="Average Lateral Deviation (m)", main =paste0("Result of runAllComplexStrategies with ", as.character(nrSimulations) , " simulation(s) (", as.character(nrow(tableAllSamples)) ,  " datapoints)")))
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
### plotinf the mean of the human data
sf_means_subset <- sf[which(sf$phoneNrLengthBeforeKeyPress=='11'),]
sf_meanlane <- sf_means_subset$lanePosition
sf_meanlane.se <- sf_means_subset$lanePosition.se
sf_meantime <- sf_means_subset$timeRelativeToTrialStart / 1000
sf_meantime.se <- sf_means_subset$timeRelativeToTrialStart.se / 1000
df_means_subset <- df[which(df$phoneNrLengthBeforeKeyPress=='11'),]
df_meanlane <- df_means_subset$lanePosition
df_meanlane.se <- df_means_subset$lanePosition.se
df_meantime <- df_means_subset$timeRelativeToTrialStart / 1000
df_meantime.se <- df_means_subset$timeRelativeToTrialStart.se / 1000
#SF points + arrows
points(sf_meantime,sf_meanlane, col="green",pch=22, ylim = g_range,bg="green")
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime,sf_meanlane - sf_meanlane.se,sf_meantime,sf_meanlane + sf_meanlane.se, angle=90,code=3, col = "green", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime - sf_meantime.se, sf_meanlane , sf_meantime + sf_meantime.se, sf_meanlane , angle = 90, code = 3, col="green", length = 0.1)
#DF points + arrows
points(df_meantime,df_meanlane, col="blue",pch=22, ylim = g_range)
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime,df_meanlane - df_meanlane.se,df_meantime,df_meanlane + df_meanlane.se, angle=90,code=3, col = "blue", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime - df_meantime.se, df_meanlane , df_meantime + df_meantime.se, df_meanlane , angle = 90, code = 3, col="blue", length = 0.1)
# Create labels and legend
legend(5, 0.95, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
### give a summary of the data
summary(agrResultsMeanDrift$TrialTime)
agrResultsMeanDriftonly56 <- agrResultsMeanDrift[agrResultsMeanDrift$strats== "3, 7", ]
#### make a plot that visualizes all the strategies: note that trial time is divided by 1000 to get the time in seconds
with(agrResultsMeanDrift,plot(TrialTime/1000,abs(dev),pch=21,bg="dark grey",col="dark grey",log = "x",xlab="Dial time (s)",ylab="Average Lateral Deviation (m)", main =paste0("Result of runAllComplexStrategies with ", as.character(nrSimulations) , " simulation(s) (", as.character(nrow(tableAllSamples)) ,  " datapoints)")))
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
### plotinf the mean of the human data
sf_means_subset <- sf[which(sf$phoneNrLengthBeforeKeyPress=='11'),]
sf_meanlane <- sf_means_subset$lanePosition
sf_meanlane.se <- sf_means_subset$lanePosition.se
sf_meantime <- sf_means_subset$timeRelativeToTrialStart / 1000
sf_meantime.se <- sf_means_subset$timeRelativeToTrialStart.se / 1000
df_means_subset <- df[which(df$phoneNrLengthBeforeKeyPress=='11'),]
df_meanlane <- df_means_subset$lanePosition
df_meanlane.se <- df_means_subset$lanePosition.se
df_meantime <- df_means_subset$timeRelativeToTrialStart / 1000
df_meantime.se <- df_means_subset$timeRelativeToTrialStart.se / 1000
#SF points + arrows
points(sf_meantime,sf_meanlane, col="green",pch=22, ylim = g_range,bg="green")
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime,sf_meanlane - sf_meanlane.se,sf_meantime,sf_meanlane + sf_meanlane.se, angle=90,code=3, col = "green", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime - sf_meantime.se, sf_meanlane , sf_meantime + sf_meantime.se, sf_meanlane , angle = 90, code = 3, col="green", length = 0.1)
#DF points + arrows
points(df_meantime,df_meanlane, col="blue",pch=22, ylim = g_range)
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime,df_meanlane - df_meanlane.se,df_meantime,df_meanlane + df_meanlane.se, angle=90,code=3, col = "blue", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime - df_meantime.se, df_meanlane , df_meantime + df_meantime.se, df_meanlane , angle = 90, code = 3, col="blue", length = 0.1)
# Create labels and legend
legend(5, 0.95, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
### give a summary of the data
summary(agrResultsMeanDrift$TrialTime)
agrResultsMeanDriftonly56 <- agrResultsMeanDrift[agrResultsMeanDrift$strats== "3, 8", ]
#### make a plot that visualizes all the strategies: note that trial time is divided by 1000 to get the time in seconds
with(agrResultsMeanDrift,plot(TrialTime/1000,abs(dev),pch=21,bg="dark grey",col="dark grey",log = "x",xlab="Dial time (s)",ylab="Average Lateral Deviation (m)", main =paste0("Result of runAllComplexStrategies with ", as.character(nrSimulations) , " simulation(s) (", as.character(nrow(tableAllSamples)) ,  " datapoints)")))
### plot of only the 5 and 6 interliving
points(agrResultsMeanDriftonly56$TrialTime/1000,abs(agrResultsMeanDriftonly56$dev),col="red",bg="red",pch =21)
### plotinf the mean of the human data
sf_means_subset <- sf[which(sf$phoneNrLengthBeforeKeyPress=='11'),]
sf_meanlane <- sf_means_subset$lanePosition
sf_meanlane.se <- sf_means_subset$lanePosition.se
sf_meantime <- sf_means_subset$timeRelativeToTrialStart / 1000
sf_meantime.se <- sf_means_subset$timeRelativeToTrialStart.se / 1000
df_means_subset <- df[which(df$phoneNrLengthBeforeKeyPress=='11'),]
df_meanlane <- df_means_subset$lanePosition
df_meanlane.se <- df_means_subset$lanePosition.se
df_meantime <- df_means_subset$timeRelativeToTrialStart / 1000
df_meantime.se <- df_means_subset$timeRelativeToTrialStart.se / 1000
#SF points + arrows
points(sf_meantime,sf_meanlane, col="green",pch=22, ylim = g_range,bg="green")
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime,sf_meanlane - sf_meanlane.se,sf_meantime,sf_meanlane + sf_meanlane.se, angle=90,code=3, col = "green", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(sf_meantime - sf_meantime.se, sf_meanlane , sf_meantime + sf_meantime.se, sf_meanlane , angle = 90, code = 3, col="green", length = 0.1)
#DF points + arrows
points(df_meantime,df_meanlane, col="blue",pch=22, ylim = g_range)
#Horizontal Arrows: se error regarding lane. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime,df_meanlane - df_meanlane.se,df_meantime,df_meanlane + df_meanlane.se, angle=90,code=3, col = "blue", length = 0.1)
#Vertical Arrows: se error regarding dial time. (x0, y0, x1 = x0, y1 = y0)
arrows(df_meantime - df_meantime.se, df_meanlane , df_meantime + df_meantime.se, df_meanlane , angle = 90, code = 3, col="blue", length = 0.1)
# Create labels and legend
legend(5, 0.95, c("Interleave between the 5th and 6th digit","Steering focus mean of human data", "Dialing focus mean of human data"), cex=0.8,
col=c("red","green", "blue"), pch=21:23, lty=1:2)
### give a summary of the data
summary(agrResultsMeanDrift$TrialTime)
